// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户角色枚举
enum UserRole {
  USER
  ADMIN
  MANAGER
}

// 订单状态枚举
enum OrderStatus {
  PENDING
  CONFIRMED
  ONGOING
  COMPLETED
  CANCELLED
  REFUNDED
}

// 通知类型枚举
enum NotificationType {
  ORDER
  SYSTEM
  PROMOTION
  MAINTENANCE
}

// 支付状态枚举
enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

// 1. 用户表（接入Google OAuth）
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  image         String?
  phone         String?
  password      String? 
  driverLicense String?
  
  // Google OAuth相关字段
  googleId      String?  @unique
  
  // NextAuth.js 相关字段
  emailVerified DateTime?
  
  // 用户角色
  role          UserRole @default(USER)
  
  // 是否激活
  isActive      Boolean  @default(true)
  
  // 创建和更新时间
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // NextAuth.js 关联关系
  accounts      Account[]
  sessions      Session[]
  
  // 关联关系
  orders        Order[]
  notifications Notification[]
  
  @@map("users")
}

// NextAuth.js 账户表
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth.js 会话表
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth.js 验证令牌表
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// 2. 店面表（后台配置）
model Store {
  id          String   @id @default(cuid())
  name        String
  address     String
  city        String
  state       String?
  zipCode     String?
  phone       String
  email       String?
  description String?
  image       String?
  
  // Google Maps链接
  googleMap   String?
  
  // 地理位置
  latitude    Float?
  longitude   Float?
  
  // 营业时间
  openingHours Json?
  
  // 是否激活
  isActive    Boolean  @default(true)
  
  // 创建和更新时间
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联关系
  orders      Order[]
  
  @@map("stores")
}

// 3. 套餐表（后台配置）
model Package {
  id          String   @id @default(cuid())
  name        String
  title       String?  // 套餐标题
  
  // 价格信息
  price       Float
  originalPrice Float? // 原价，用于显示折扣
  
  // 套餐详情
  description String?  // 简短描述
  content     String?  // Markdown格式的详细内容
  
  // 图片
  images      String[] // 多张图片
  thumbnail   String?  // 缩略图
  
  // 库存管理
  stock       Int      @default(0)
  maxStock    Int      @default(0) // 最大库存，用于库存预警
  
  // 分类和标签
  category    String?
  tags        String[]
  
  // 套餐状态
  isActive    Boolean  @default(true)
  isPublished Boolean  @default(false)
  
  // 排序权重
  sortOrder   Int      @default(0)
  
  // SEO字段
  slug        String?  @unique
  metaTitle   String?
  metaDescription String?
  
  // 创建和更新时间
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联关系
  orders      Order[]
  
  @@map("packages")
}

// 4. 订单表（套餐购买）
model Order {
  id                     String      @id @default(cuid())
  orderNumber            String      @unique @default(cuid())
  
  // 用户和套餐关联
  userId                 String
  user                   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  packageId              String
  package                Package     @relation(fields: [packageId], references: [id], onDelete: Cascade)
  storeId                String
  store                  Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  
  // 购买数量
  quantity               Int         @default(1)
  
  // 价格信息
  unitPrice              Float
  subtotal               Float
  taxAmount              Float       @default(0)
  totalAmount            Float
  
  // 订单状态
  status                 OrderStatus @default(PENDING)
  
  // Stripe支付信息
  stripePaymentIntentId  String?
  stripeCustomerId       String?
  
  // 收货信息
  deliveryAddress        String?
  deliveryPhone          String?
  deliveryName           String?
  deliveryNotes          String?
  
  // 备注
  notes                  String?
  
  // 创建和更新时间
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  
  // 关联关系
  payments               Payment[]
  notifications          Notification[]
  
  @@map("orders")
}

// 5. 新闻表
model News {
  id          String   @id @default(cuid())
  title       String
  content     String
  summary     String?
  image       String?
  author      String?
  
  // 分类和标签
  category    String?
  tags        String[]
  
  // 发布状态
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  
  // SEO字段
  slug        String?  @unique
  metaTitle   String?
  metaDescription String?
  
  // 创建和更新时间
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("news")
}

// 6. 用户通知表
model Notification {
  id              String           @id @default(cuid())
  
  // 关联用户
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // 通知内容
  title           String
  message         String
  type            NotificationType
  
  // 阅读状态
  isRead          Boolean          @default(false)
  readAt          DateTime?
  
  // 关联订单（可选）
  relatedOrderId  String?
  relatedOrder    Order?           @relation(fields: [relatedOrderId], references: [id], onDelete: Cascade)
  
  // 创建时间
  createdAt       DateTime         @default(now())
  
  @@map("notifications")
}

// 7. 支付记录表（Stripe集成）
model Payment {
  id                    String        @id @default(cuid())
  
  // 关联订单
  orderId               String
  order                 Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  // 支付金额
  amount                Float
  currency              String        @default("jpy")
  
  // Stripe相关字段
  stripePaymentIntentId String        @unique
  stripeChargeId        String?
  
  // 支付状态
  status                PaymentStatus @default(PENDING)
  
  // 支付方式
  paymentMethod         String?
  
  // 退款信息
  refundAmount          Float?
  refundReason          String?
  refundedAt            DateTime?
  
  // 创建和更新时间
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  
  @@map("payments")
}
